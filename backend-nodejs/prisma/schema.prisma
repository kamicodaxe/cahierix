datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  firstName   String?
  lastName    String?
  countryCode String?
  phone       String?

  shoppingCart  ShoppingCart?
  auth          AuthProfile?
  orders        Order[]
  notifications Notification[]
  userId        String         @unique
}

model AuthProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [userId])
  userId           String   @unique
  verified         Boolean  @default(false)
  confirmationCode String?
  password         String?
  googleId         String?
  facebookId       String?
}

model ShoppingCart {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  totalAmount Float
  items       CartItem[]
  user        User       @relation(fields: [userId], references: [userId])
  userId      String     @unique
}

model CartItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  quantity  Int
  product   Product      @relation(fields: [productId], references: [id])
  productId String       @db.ObjectId
  cart      ShoppingCart @relation(fields: [cartId], references: [id])
  cartId    String       @db.ObjectId
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  price       Float
  cartItems   CartItem[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  totalAmount Float
  status      OrderStatus
  items       OrderItem[]
  user        User        @relation(fields: [userId], references: [userId])
  userId      String
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  name      String
  productId Int
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String @db.ObjectId
}

enum OrderStatus {
  CREATED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
